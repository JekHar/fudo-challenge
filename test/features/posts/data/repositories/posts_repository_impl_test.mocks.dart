// Mocks generated by Mockito 5.4.4 from annotations
// in fudo_challenge/test/features/posts/data/repositories/posts_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fudo_challenge/core/interfaces/network_info.dart' as _i7;
import 'package:fudo_challenge/features/posts/data/datasources/posts_local_data_source.dart'
    as _i6;
import 'package:fudo_challenge/features/posts/data/datasources/posts_remote_data_source.dart'
    as _i3;
import 'package:fudo_challenge/features/posts/data/models/post_model.dart'
    as _i5;
import 'package:fudo_challenge/features/posts/domain/entities/post.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePost_0 extends _i1.SmartFake implements _i2.Post {
  _FakePost_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostsRemoteDataSource extends _i1.Mock
    implements _i3.PostsRemoteDataSource {
  MockPostsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.PostModel>> getPosts() => (super.noSuchMethod(
        Invocation.method(
          #getPosts,
          [],
        ),
        returnValue: _i4.Future<List<_i5.PostModel>>.value(<_i5.PostModel>[]),
      ) as _i4.Future<List<_i5.PostModel>>);

  @override
  _i4.Future<List<_i5.PostModel>> getPostsByUserId(int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostsByUserId,
          [userId],
        ),
        returnValue: _i4.Future<List<_i5.PostModel>>.value(<_i5.PostModel>[]),
      ) as _i4.Future<List<_i5.PostModel>>);

  @override
  _i4.Future<_i2.Post> createPost(
    String? title,
    String? body,
    int? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPost,
          [
            title,
            body,
            userId,
          ],
        ),
        returnValue: _i4.Future<_i2.Post>.value(_FakePost_0(
          this,
          Invocation.method(
            #createPost,
            [
              title,
              body,
              userId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Post>);
}

/// A class which mocks [PostsLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostsLocalDataSource extends _i1.Mock
    implements _i6.PostsLocalDataSource {
  MockPostsLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> cachePosts(List<_i5.PostModel>? posts) =>
      (super.noSuchMethod(
        Invocation.method(
          #cachePosts,
          [posts],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.PostModel>> getCachedPosts() => (super.noSuchMethod(
        Invocation.method(
          #getCachedPosts,
          [],
        ),
        returnValue: _i4.Future<List<_i5.PostModel>>.value(<_i5.PostModel>[]),
      ) as _i4.Future<List<_i5.PostModel>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
